/*
 * @ao/ah-api
 *
 * Telia Smart Access API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SmartAccess.Client.OpenAPIDateConverter;

namespace SmartAccess.Model
{
    /// <summary>
    /// CreateResourceTemplateDTO
    /// </summary>
    [DataContract(Name = "CreateResourceTemplateDTO")]
    public partial class CreateResourceTemplateDTO : IEquatable<CreateResourceTemplateDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateResourceTemplateDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateResourceTemplateDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateResourceTemplateDTO" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="policyActionTemplateId">policyActionTemplateId.</param>
        /// <param name="tenantName">tenantName (required).</param>
        /// <param name="systemName">systemName (required).</param>
        /// <param name="resourceTagTemplates">resourceTagTemplates (required).</param>
        public CreateResourceTemplateDTO(string id = default(string), string policyActionTemplateId = default(string), string tenantName = default(string), string systemName = default(string), List<CreateResourceTagTemplateDTO> resourceTagTemplates = default(List<CreateResourceTagTemplateDTO>))
        {
            // to ensure "tenantName" is required (not null)
            if (tenantName == null) {
                throw new ArgumentNullException("tenantName is a required property for CreateResourceTemplateDTO and cannot be null");
            }
            this.TenantName = tenantName;
            // to ensure "systemName" is required (not null)
            if (systemName == null) {
                throw new ArgumentNullException("systemName is a required property for CreateResourceTemplateDTO and cannot be null");
            }
            this.SystemName = systemName;
            // to ensure "resourceTagTemplates" is required (not null)
            if (resourceTagTemplates == null) {
                throw new ArgumentNullException("resourceTagTemplates is a required property for CreateResourceTemplateDTO and cannot be null");
            }
            this.ResourceTagTemplates = resourceTagTemplates;
            this.Id = id;
            this.PolicyActionTemplateId = policyActionTemplateId;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PolicyActionTemplateId
        /// </summary>
        [DataMember(Name = "policyActionTemplateId", EmitDefaultValue = false)]
        public string PolicyActionTemplateId { get; set; }

        /// <summary>
        /// Gets or Sets TenantName
        /// </summary>
        [DataMember(Name = "tenantName", IsRequired = true, EmitDefaultValue = false)]
        public string TenantName { get; set; }

        /// <summary>
        /// Gets or Sets SystemName
        /// </summary>
        [DataMember(Name = "systemName", IsRequired = true, EmitDefaultValue = false)]
        public string SystemName { get; set; }

        /// <summary>
        /// Gets or Sets ResourceTagTemplates
        /// </summary>
        [DataMember(Name = "resourceTagTemplates", IsRequired = true, EmitDefaultValue = false)]
        public List<CreateResourceTagTemplateDTO> ResourceTagTemplates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateResourceTemplateDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PolicyActionTemplateId: ").Append(PolicyActionTemplateId).Append("\n");
            sb.Append("  TenantName: ").Append(TenantName).Append("\n");
            sb.Append("  SystemName: ").Append(SystemName).Append("\n");
            sb.Append("  ResourceTagTemplates: ").Append(ResourceTagTemplates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateResourceTemplateDTO);
        }

        /// <summary>
        /// Returns true if CreateResourceTemplateDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateResourceTemplateDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateResourceTemplateDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PolicyActionTemplateId == input.PolicyActionTemplateId ||
                    (this.PolicyActionTemplateId != null &&
                    this.PolicyActionTemplateId.Equals(input.PolicyActionTemplateId))
                ) && 
                (
                    this.TenantName == input.TenantName ||
                    (this.TenantName != null &&
                    this.TenantName.Equals(input.TenantName))
                ) && 
                (
                    this.SystemName == input.SystemName ||
                    (this.SystemName != null &&
                    this.SystemName.Equals(input.SystemName))
                ) && 
                (
                    this.ResourceTagTemplates == input.ResourceTagTemplates ||
                    this.ResourceTagTemplates != null &&
                    input.ResourceTagTemplates != null &&
                    this.ResourceTagTemplates.SequenceEqual(input.ResourceTagTemplates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PolicyActionTemplateId != null)
                    hashCode = hashCode * 59 + this.PolicyActionTemplateId.GetHashCode();
                if (this.TenantName != null)
                    hashCode = hashCode * 59 + this.TenantName.GetHashCode();
                if (this.SystemName != null)
                    hashCode = hashCode * 59 + this.SystemName.GetHashCode();
                if (this.ResourceTagTemplates != null)
                    hashCode = hashCode * 59 + this.ResourceTagTemplates.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
