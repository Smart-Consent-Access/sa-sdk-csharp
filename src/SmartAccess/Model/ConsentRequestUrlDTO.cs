/*
 * @ao/ah-api
 *
 * Telia Smart Access API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SmartAccess.Client.OpenAPIDateConverter;

namespace SmartAccess.Model
{
    /// <summary>
    /// Contains the URL including the jwt to use to trigger finalization of the consent request in the consenting serviceprovider (can be called by ao web or by requesting service provider) The jwt payload is of type SAConsReqInitializeSaToSp2JWT
    /// </summary>
    [DataContract(Name = "ConsentRequestUrlDTO")]
    public partial class ConsentRequestUrlDTO : IEquatable<ConsentRequestUrlDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentRequestUrlDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConsentRequestUrlDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentRequestUrlDTO" /> class.
        /// </summary>
        /// <param name="consentRequestURL">consentRequestURL (required).</param>
        public ConsentRequestUrlDTO(string consentRequestURL = default(string))
        {
            // to ensure "consentRequestURL" is required (not null)
            if (consentRequestURL == null) {
                throw new ArgumentNullException("consentRequestURL is a required property for ConsentRequestUrlDTO and cannot be null");
            }
            this.ConsentRequestURL = consentRequestURL;
        }

        /// <summary>
        /// Gets or Sets ConsentRequestURL
        /// </summary>
        [DataMember(Name = "consentRequestURL", IsRequired = true, EmitDefaultValue = false)]
        public string ConsentRequestURL { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConsentRequestUrlDTO {\n");
            sb.Append("  ConsentRequestURL: ").Append(ConsentRequestURL).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConsentRequestUrlDTO);
        }

        /// <summary>
        /// Returns true if ConsentRequestUrlDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ConsentRequestUrlDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConsentRequestUrlDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConsentRequestURL == input.ConsentRequestURL ||
                    (this.ConsentRequestURL != null &&
                    this.ConsentRequestURL.Equals(input.ConsentRequestURL))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConsentRequestURL != null)
                    hashCode = hashCode * 59 + this.ConsentRequestURL.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
