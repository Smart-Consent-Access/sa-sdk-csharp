/*
 * @ao/ah-api
 *
 * Telia Smart Access API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SmartAccess.Client.OpenAPIDateConverter;

namespace SmartAccess.Model
{
    /// <summary>
    /// ServiceProviderPatchDTO
    /// </summary>
    [DataContract(Name = "ServiceProviderPatchDTO")]
    public partial class ServiceProviderPatchDTO : IEquatable<ServiceProviderPatchDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceProviderPatchDTO" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="iconUrl">iconUrl.</param>
        /// <param name="publicKey">publicKey.</param>
        /// <param name="initiateConsentRequestUrl">initiateConsentRequestUrl.</param>
        /// <param name="finalizeConsentRequestUrl">finalizeConsentRequestUrl.</param>
        /// <param name="initiateConsentUrl">initiateConsentUrl.</param>
        /// <param name="finalizeConsentUrl">finalizeConsentUrl.</param>
        public ServiceProviderPatchDTO(string id = default(string), string name = default(string), string iconUrl = default(string), string publicKey = default(string), string initiateConsentRequestUrl = default(string), string finalizeConsentRequestUrl = default(string), string initiateConsentUrl = default(string), string finalizeConsentUrl = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.IconUrl = iconUrl;
            this.PublicKey = publicKey;
            this.InitiateConsentRequestUrl = initiateConsentRequestUrl;
            this.FinalizeConsentRequestUrl = finalizeConsentRequestUrl;
            this.InitiateConsentUrl = initiateConsentUrl;
            this.FinalizeConsentUrl = finalizeConsentUrl;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets IconUrl
        /// </summary>
        [DataMember(Name = "iconUrl", EmitDefaultValue = false)]
        public string IconUrl { get; set; }

        /// <summary>
        /// Gets or Sets PublicKey
        /// </summary>
        [DataMember(Name = "publicKey", EmitDefaultValue = false)]
        public string PublicKey { get; set; }

        /// <summary>
        /// Gets or Sets InitiateConsentRequestUrl
        /// </summary>
        [DataMember(Name = "initiateConsentRequestUrl", EmitDefaultValue = false)]
        public string InitiateConsentRequestUrl { get; set; }

        /// <summary>
        /// Gets or Sets FinalizeConsentRequestUrl
        /// </summary>
        [DataMember(Name = "finalizeConsentRequestUrl", EmitDefaultValue = false)]
        public string FinalizeConsentRequestUrl { get; set; }

        /// <summary>
        /// Gets or Sets InitiateConsentUrl
        /// </summary>
        [DataMember(Name = "initiateConsentUrl", EmitDefaultValue = false)]
        public string InitiateConsentUrl { get; set; }

        /// <summary>
        /// Gets or Sets FinalizeConsentUrl
        /// </summary>
        [DataMember(Name = "finalizeConsentUrl", EmitDefaultValue = false)]
        public string FinalizeConsentUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceProviderPatchDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("  PublicKey: ").Append(PublicKey).Append("\n");
            sb.Append("  InitiateConsentRequestUrl: ").Append(InitiateConsentRequestUrl).Append("\n");
            sb.Append("  FinalizeConsentRequestUrl: ").Append(FinalizeConsentRequestUrl).Append("\n");
            sb.Append("  InitiateConsentUrl: ").Append(InitiateConsentUrl).Append("\n");
            sb.Append("  FinalizeConsentUrl: ").Append(FinalizeConsentUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceProviderPatchDTO);
        }

        /// <summary>
        /// Returns true if ServiceProviderPatchDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceProviderPatchDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceProviderPatchDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.IconUrl == input.IconUrl ||
                    (this.IconUrl != null &&
                    this.IconUrl.Equals(input.IconUrl))
                ) && 
                (
                    this.PublicKey == input.PublicKey ||
                    (this.PublicKey != null &&
                    this.PublicKey.Equals(input.PublicKey))
                ) && 
                (
                    this.InitiateConsentRequestUrl == input.InitiateConsentRequestUrl ||
                    (this.InitiateConsentRequestUrl != null &&
                    this.InitiateConsentRequestUrl.Equals(input.InitiateConsentRequestUrl))
                ) && 
                (
                    this.FinalizeConsentRequestUrl == input.FinalizeConsentRequestUrl ||
                    (this.FinalizeConsentRequestUrl != null &&
                    this.FinalizeConsentRequestUrl.Equals(input.FinalizeConsentRequestUrl))
                ) && 
                (
                    this.InitiateConsentUrl == input.InitiateConsentUrl ||
                    (this.InitiateConsentUrl != null &&
                    this.InitiateConsentUrl.Equals(input.InitiateConsentUrl))
                ) && 
                (
                    this.FinalizeConsentUrl == input.FinalizeConsentUrl ||
                    (this.FinalizeConsentUrl != null &&
                    this.FinalizeConsentUrl.Equals(input.FinalizeConsentUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.IconUrl != null)
                    hashCode = hashCode * 59 + this.IconUrl.GetHashCode();
                if (this.PublicKey != null)
                    hashCode = hashCode * 59 + this.PublicKey.GetHashCode();
                if (this.InitiateConsentRequestUrl != null)
                    hashCode = hashCode * 59 + this.InitiateConsentRequestUrl.GetHashCode();
                if (this.FinalizeConsentRequestUrl != null)
                    hashCode = hashCode * 59 + this.FinalizeConsentRequestUrl.GetHashCode();
                if (this.InitiateConsentUrl != null)
                    hashCode = hashCode * 59 + this.InitiateConsentUrl.GetHashCode();
                if (this.FinalizeConsentUrl != null)
                    hashCode = hashCode * 59 + this.FinalizeConsentUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
