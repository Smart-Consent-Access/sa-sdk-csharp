/*
 * @ao/ah-api
 *
 * Telia Smart Access API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SmartAccess.Client.OpenAPIDateConverter;

namespace SmartAccess.Model
{
    /// <summary>
    /// ConsentSearchResultDTO
    /// </summary>
    [DataContract(Name = "ConsentSearchResultDTO")]
    public partial class ConsentSearchResultDTO : IEquatable<ConsentSearchResultDTO>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public ConsentType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentSearchResultDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConsentSearchResultDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentSearchResultDTO" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="reqServiceProviderId">reqServiceProviderId (required).</param>
        /// <param name="reqServiceProviderName">reqServiceProviderName (required).</param>
        /// <param name="consPrincipalId">consPrincipalId (required).</param>
        /// <param name="consPrincipalName">consPrincipalName (required).</param>
        /// <param name="consServiceProviderId">consServiceProviderId (required).</param>
        /// <param name="consServiceProviderName">consServiceProviderName (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="consentRequestId">consentRequestId (required).</param>
        /// <param name="policies">policies (required).</param>
        public ConsentSearchResultDTO(string id = default(string), string reqServiceProviderId = default(string), string reqServiceProviderName = default(string), string consPrincipalId = default(string), string consPrincipalName = default(string), string consServiceProviderId = default(string), string consServiceProviderName = default(string), string status = default(string), ConsentType type = default(ConsentType), string createdAt = default(string), string updatedAt = default(string), string consentRequestId = default(string), List<PolicyDTO> policies = default(List<PolicyDTO>))
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for ConsentSearchResultDTO and cannot be null");
            }
            this.Id = id;
            // to ensure "reqServiceProviderId" is required (not null)
            if (reqServiceProviderId == null) {
                throw new ArgumentNullException("reqServiceProviderId is a required property for ConsentSearchResultDTO and cannot be null");
            }
            this.ReqServiceProviderId = reqServiceProviderId;
            // to ensure "reqServiceProviderName" is required (not null)
            if (reqServiceProviderName == null) {
                throw new ArgumentNullException("reqServiceProviderName is a required property for ConsentSearchResultDTO and cannot be null");
            }
            this.ReqServiceProviderName = reqServiceProviderName;
            // to ensure "consPrincipalId" is required (not null)
            if (consPrincipalId == null) {
                throw new ArgumentNullException("consPrincipalId is a required property for ConsentSearchResultDTO and cannot be null");
            }
            this.ConsPrincipalId = consPrincipalId;
            // to ensure "consPrincipalName" is required (not null)
            if (consPrincipalName == null) {
                throw new ArgumentNullException("consPrincipalName is a required property for ConsentSearchResultDTO and cannot be null");
            }
            this.ConsPrincipalName = consPrincipalName;
            // to ensure "consServiceProviderId" is required (not null)
            if (consServiceProviderId == null) {
                throw new ArgumentNullException("consServiceProviderId is a required property for ConsentSearchResultDTO and cannot be null");
            }
            this.ConsServiceProviderId = consServiceProviderId;
            // to ensure "consServiceProviderName" is required (not null)
            if (consServiceProviderName == null) {
                throw new ArgumentNullException("consServiceProviderName is a required property for ConsentSearchResultDTO and cannot be null");
            }
            this.ConsServiceProviderName = consServiceProviderName;
            // to ensure "status" is required (not null)
            if (status == null) {
                throw new ArgumentNullException("status is a required property for ConsentSearchResultDTO and cannot be null");
            }
            this.Status = status;
            this.Type = type;
            // to ensure "createdAt" is required (not null)
            if (createdAt == null) {
                throw new ArgumentNullException("createdAt is a required property for ConsentSearchResultDTO and cannot be null");
            }
            this.CreatedAt = createdAt;
            // to ensure "consentRequestId" is required (not null)
            if (consentRequestId == null) {
                throw new ArgumentNullException("consentRequestId is a required property for ConsentSearchResultDTO and cannot be null");
            }
            this.ConsentRequestId = consentRequestId;
            // to ensure "policies" is required (not null)
            if (policies == null) {
                throw new ArgumentNullException("policies is a required property for ConsentSearchResultDTO and cannot be null");
            }
            this.Policies = policies;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ReqServiceProviderId
        /// </summary>
        [DataMember(Name = "reqServiceProviderId", IsRequired = true, EmitDefaultValue = false)]
        public string ReqServiceProviderId { get; set; }

        /// <summary>
        /// Gets or Sets ReqServiceProviderName
        /// </summary>
        [DataMember(Name = "reqServiceProviderName", IsRequired = true, EmitDefaultValue = false)]
        public string ReqServiceProviderName { get; set; }

        /// <summary>
        /// Gets or Sets ConsPrincipalId
        /// </summary>
        [DataMember(Name = "consPrincipalId", IsRequired = true, EmitDefaultValue = false)]
        public string ConsPrincipalId { get; set; }

        /// <summary>
        /// Gets or Sets ConsPrincipalName
        /// </summary>
        [DataMember(Name = "consPrincipalName", IsRequired = true, EmitDefaultValue = false)]
        public string ConsPrincipalName { get; set; }

        /// <summary>
        /// Gets or Sets ConsServiceProviderId
        /// </summary>
        [DataMember(Name = "consServiceProviderId", IsRequired = true, EmitDefaultValue = false)]
        public string ConsServiceProviderId { get; set; }

        /// <summary>
        /// Gets or Sets ConsServiceProviderName
        /// </summary>
        [DataMember(Name = "consServiceProviderName", IsRequired = true, EmitDefaultValue = false)]
        public string ConsServiceProviderName { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ConsentRequestId
        /// </summary>
        [DataMember(Name = "consentRequestId", IsRequired = true, EmitDefaultValue = false)]
        public string ConsentRequestId { get; set; }

        /// <summary>
        /// Gets or Sets Policies
        /// </summary>
        [DataMember(Name = "policies", IsRequired = true, EmitDefaultValue = false)]
        public List<PolicyDTO> Policies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConsentSearchResultDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ReqServiceProviderId: ").Append(ReqServiceProviderId).Append("\n");
            sb.Append("  ReqServiceProviderName: ").Append(ReqServiceProviderName).Append("\n");
            sb.Append("  ConsPrincipalId: ").Append(ConsPrincipalId).Append("\n");
            sb.Append("  ConsPrincipalName: ").Append(ConsPrincipalName).Append("\n");
            sb.Append("  ConsServiceProviderId: ").Append(ConsServiceProviderId).Append("\n");
            sb.Append("  ConsServiceProviderName: ").Append(ConsServiceProviderName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  ConsentRequestId: ").Append(ConsentRequestId).Append("\n");
            sb.Append("  Policies: ").Append(Policies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConsentSearchResultDTO);
        }

        /// <summary>
        /// Returns true if ConsentSearchResultDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ConsentSearchResultDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConsentSearchResultDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ReqServiceProviderId == input.ReqServiceProviderId ||
                    (this.ReqServiceProviderId != null &&
                    this.ReqServiceProviderId.Equals(input.ReqServiceProviderId))
                ) && 
                (
                    this.ReqServiceProviderName == input.ReqServiceProviderName ||
                    (this.ReqServiceProviderName != null &&
                    this.ReqServiceProviderName.Equals(input.ReqServiceProviderName))
                ) && 
                (
                    this.ConsPrincipalId == input.ConsPrincipalId ||
                    (this.ConsPrincipalId != null &&
                    this.ConsPrincipalId.Equals(input.ConsPrincipalId))
                ) && 
                (
                    this.ConsPrincipalName == input.ConsPrincipalName ||
                    (this.ConsPrincipalName != null &&
                    this.ConsPrincipalName.Equals(input.ConsPrincipalName))
                ) && 
                (
                    this.ConsServiceProviderId == input.ConsServiceProviderId ||
                    (this.ConsServiceProviderId != null &&
                    this.ConsServiceProviderId.Equals(input.ConsServiceProviderId))
                ) && 
                (
                    this.ConsServiceProviderName == input.ConsServiceProviderName ||
                    (this.ConsServiceProviderName != null &&
                    this.ConsServiceProviderName.Equals(input.ConsServiceProviderName))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.ConsentRequestId == input.ConsentRequestId ||
                    (this.ConsentRequestId != null &&
                    this.ConsentRequestId.Equals(input.ConsentRequestId))
                ) && 
                (
                    this.Policies == input.Policies ||
                    this.Policies != null &&
                    input.Policies != null &&
                    this.Policies.SequenceEqual(input.Policies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ReqServiceProviderId != null)
                    hashCode = hashCode * 59 + this.ReqServiceProviderId.GetHashCode();
                if (this.ReqServiceProviderName != null)
                    hashCode = hashCode * 59 + this.ReqServiceProviderName.GetHashCode();
                if (this.ConsPrincipalId != null)
                    hashCode = hashCode * 59 + this.ConsPrincipalId.GetHashCode();
                if (this.ConsPrincipalName != null)
                    hashCode = hashCode * 59 + this.ConsPrincipalName.GetHashCode();
                if (this.ConsServiceProviderId != null)
                    hashCode = hashCode * 59 + this.ConsServiceProviderId.GetHashCode();
                if (this.ConsServiceProviderName != null)
                    hashCode = hashCode * 59 + this.ConsServiceProviderName.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.ConsentRequestId != null)
                    hashCode = hashCode * 59 + this.ConsentRequestId.GetHashCode();
                if (this.Policies != null)
                    hashCode = hashCode * 59 + this.Policies.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
