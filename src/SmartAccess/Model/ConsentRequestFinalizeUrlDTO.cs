/*
 * @ao/ah-api
 *
 * Telia Smart Access API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SmartAccess.Client.OpenAPIDateConverter;

namespace SmartAccess.Model
{
    /// <summary>
    /// Contains the URL including the jwt to use to trigger finalization of the consent request in the requesting serviceprovider (can be called by ao web or by consenting service provider) The jwt payload is of type SAConsReqFinalizeSaToSp1JWT
    /// </summary>
    [DataContract(Name = "ConsentRequestFinalizeUrlDTO")]
    public partial class ConsentRequestFinalizeUrlDTO : IEquatable<ConsentRequestFinalizeUrlDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentRequestFinalizeUrlDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConsentRequestFinalizeUrlDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentRequestFinalizeUrlDTO" /> class.
        /// </summary>
        /// <param name="consReqFinalizeURL">consReqFinalizeURL (required).</param>
        public ConsentRequestFinalizeUrlDTO(string consReqFinalizeURL = default(string))
        {
            // to ensure "consReqFinalizeURL" is required (not null)
            if (consReqFinalizeURL == null) {
                throw new ArgumentNullException("consReqFinalizeURL is a required property for ConsentRequestFinalizeUrlDTO and cannot be null");
            }
            this.ConsReqFinalizeURL = consReqFinalizeURL;
        }

        /// <summary>
        /// Gets or Sets ConsReqFinalizeURL
        /// </summary>
        [DataMember(Name = "consReqFinalizeURL", IsRequired = true, EmitDefaultValue = false)]
        public string ConsReqFinalizeURL { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConsentRequestFinalizeUrlDTO {\n");
            sb.Append("  ConsReqFinalizeURL: ").Append(ConsReqFinalizeURL).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConsentRequestFinalizeUrlDTO);
        }

        /// <summary>
        /// Returns true if ConsentRequestFinalizeUrlDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ConsentRequestFinalizeUrlDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConsentRequestFinalizeUrlDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConsReqFinalizeURL == input.ConsReqFinalizeURL ||
                    (this.ConsReqFinalizeURL != null &&
                    this.ConsReqFinalizeURL.Equals(input.ConsReqFinalizeURL))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConsReqFinalizeURL != null)
                    hashCode = hashCode * 59 + this.ConsReqFinalizeURL.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
