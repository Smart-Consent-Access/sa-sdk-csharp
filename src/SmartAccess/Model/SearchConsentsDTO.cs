/*
 * @ao/ah-api
 *
 * Telia Smart Access API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SmartAccess.Client.OpenAPIDateConverter;

namespace SmartAccess.Model
{
    /// <summary>
    /// Specifies the search parameters to use in the search for consents (approvals)
    /// </summary>
    [DataContract(Name = "SearchConsentsDTO")]
    public partial class SearchConsentsDTO : IEquatable<SearchConsentsDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchConsentsDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchConsentsDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchConsentsDTO" /> class.
        /// </summary>
        /// <param name="skip">Pagination: Number of items to skip over in the complete search result (offset). Leave out to start from the first item.</param>
        /// <param name="take">Pagination: Number of items to take beginning from skip (0-based index). Leave out to take all.</param>
        /// <param name="searchQuery">String to search for in consents. The following data will be searched to contain the string - Policy action - Policy resource - Resource tag - Policy condition - Legal entity (id and name).  If the string matches any (OR) of these then its a search hit. An empty string matches all. Leave out to only apply the filters (fields).</param>
        /// <param name="fields">fields (required).</param>
        /// <param name="sort">sort.</param>
        public SearchConsentsDTO(double skip = default(double), double take = default(double), string searchQuery = default(string), SearchConsentsDTOFields fields = default(SearchConsentsDTOFields), SearchConsentsDTOSort sort = default(SearchConsentsDTOSort))
        {
            // to ensure "fields" is required (not null)
            if (fields == null) {
                throw new ArgumentNullException("fields is a required property for SearchConsentsDTO and cannot be null");
            }
            this.Fields = fields;
            this.Skip = skip;
            this.Take = take;
            this.SearchQuery = searchQuery;
            this.Sort = sort;
        }

        /// <summary>
        /// Pagination: Number of items to skip over in the complete search result (offset). Leave out to start from the first item
        /// </summary>
        /// <value>Pagination: Number of items to skip over in the complete search result (offset). Leave out to start from the first item</value>
        [DataMember(Name = "skip", EmitDefaultValue = false)]
        public double Skip { get; set; }

        /// <summary>
        /// Pagination: Number of items to take beginning from skip (0-based index). Leave out to take all
        /// </summary>
        /// <value>Pagination: Number of items to take beginning from skip (0-based index). Leave out to take all</value>
        [DataMember(Name = "take", EmitDefaultValue = false)]
        public double Take { get; set; }

        /// <summary>
        /// String to search for in consents. The following data will be searched to contain the string - Policy action - Policy resource - Resource tag - Policy condition - Legal entity (id and name).  If the string matches any (OR) of these then its a search hit. An empty string matches all. Leave out to only apply the filters (fields)
        /// </summary>
        /// <value>String to search for in consents. The following data will be searched to contain the string - Policy action - Policy resource - Resource tag - Policy condition - Legal entity (id and name).  If the string matches any (OR) of these then its a search hit. An empty string matches all. Leave out to only apply the filters (fields)</value>
        [DataMember(Name = "searchQuery", EmitDefaultValue = false)]
        public string SearchQuery { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name = "fields", IsRequired = true, EmitDefaultValue = false)]
        public SearchConsentsDTOFields Fields { get; set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [DataMember(Name = "sort", EmitDefaultValue = false)]
        public SearchConsentsDTOSort Sort { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchConsentsDTO {\n");
            sb.Append("  Skip: ").Append(Skip).Append("\n");
            sb.Append("  Take: ").Append(Take).Append("\n");
            sb.Append("  SearchQuery: ").Append(SearchQuery).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchConsentsDTO);
        }

        /// <summary>
        /// Returns true if SearchConsentsDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchConsentsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchConsentsDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Skip == input.Skip ||
                    this.Skip.Equals(input.Skip)
                ) && 
                (
                    this.Take == input.Take ||
                    this.Take.Equals(input.Take)
                ) && 
                (
                    this.SearchQuery == input.SearchQuery ||
                    (this.SearchQuery != null &&
                    this.SearchQuery.Equals(input.SearchQuery))
                ) && 
                (
                    this.Fields == input.Fields ||
                    (this.Fields != null &&
                    this.Fields.Equals(input.Fields))
                ) && 
                (
                    this.Sort == input.Sort ||
                    (this.Sort != null &&
                    this.Sort.Equals(input.Sort))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Skip.GetHashCode();
                hashCode = hashCode * 59 + this.Take.GetHashCode();
                if (this.SearchQuery != null)
                    hashCode = hashCode * 59 + this.SearchQuery.GetHashCode();
                if (this.Fields != null)
                    hashCode = hashCode * 59 + this.Fields.GetHashCode();
                if (this.Sort != null)
                    hashCode = hashCode * 59 + this.Sort.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
