/*
 * @ao/ah-api
 *
 * Telia Smart Access API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SmartAccess.Client.OpenAPIDateConverter;

namespace SmartAccess.Model
{
    /// <summary>
    /// PolicyConditionDTO
    /// </summary>
    [DataContract(Name = "PolicyConditionDTO")]
    public partial class PolicyConditionDTO : IEquatable<PolicyConditionDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyConditionDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PolicyConditionDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyConditionDTO" /> class.
        /// </summary>
        /// <param name="tenant">tenant (required).</param>
        /// <param name="system">system (required).</param>
        /// <param name="expression">expression (required).</param>
        public PolicyConditionDTO(string tenant = default(string), string system = default(string), string expression = default(string))
        {
            // to ensure "tenant" is required (not null)
            if (tenant == null) {
                throw new ArgumentNullException("tenant is a required property for PolicyConditionDTO and cannot be null");
            }
            this.Tenant = tenant;
            // to ensure "system" is required (not null)
            if (system == null) {
                throw new ArgumentNullException("system is a required property for PolicyConditionDTO and cannot be null");
            }
            this.System = system;
            // to ensure "expression" is required (not null)
            if (expression == null) {
                throw new ArgumentNullException("expression is a required property for PolicyConditionDTO and cannot be null");
            }
            this.Expression = expression;
        }

        /// <summary>
        /// Gets or Sets Tenant
        /// </summary>
        [DataMember(Name = "tenant", IsRequired = true, EmitDefaultValue = false)]
        public string Tenant { get; set; }

        /// <summary>
        /// Gets or Sets System
        /// </summary>
        [DataMember(Name = "system", IsRequired = true, EmitDefaultValue = false)]
        public string System { get; set; }

        /// <summary>
        /// Gets or Sets Expression
        /// </summary>
        [DataMember(Name = "expression", IsRequired = true, EmitDefaultValue = false)]
        public string Expression { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PolicyConditionDTO {\n");
            sb.Append("  Tenant: ").Append(Tenant).Append("\n");
            sb.Append("  System: ").Append(System).Append("\n");
            sb.Append("  Expression: ").Append(Expression).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PolicyConditionDTO);
        }

        /// <summary>
        /// Returns true if PolicyConditionDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of PolicyConditionDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolicyConditionDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Tenant == input.Tenant ||
                    (this.Tenant != null &&
                    this.Tenant.Equals(input.Tenant))
                ) && 
                (
                    this.System == input.System ||
                    (this.System != null &&
                    this.System.Equals(input.System))
                ) && 
                (
                    this.Expression == input.Expression ||
                    (this.Expression != null &&
                    this.Expression.Equals(input.Expression))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Tenant != null)
                    hashCode = hashCode * 59 + this.Tenant.GetHashCode();
                if (this.System != null)
                    hashCode = hashCode * 59 + this.System.GetHashCode();
                if (this.Expression != null)
                    hashCode = hashCode * 59 + this.Expression.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
