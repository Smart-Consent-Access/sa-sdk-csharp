/*
 * @ao/ah-api
 *
 * Telia Smart Access API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SmartAccess.Client.OpenAPIDateConverter;

namespace SmartAccess.Model
{
    /// <summary>
    /// Includes search result and info about pagination
    /// </summary>
    [DataContract(Name = "PaginationResultDTO_ConsentSearchResultDTO_")]
    public partial class PaginationResultDTOConsentSearchResultDTO : IEquatable<PaginationResultDTOConsentSearchResultDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaginationResultDTOConsentSearchResultDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaginationResultDTOConsentSearchResultDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaginationResultDTOConsentSearchResultDTO" /> class.
        /// </summary>
        /// <param name="list">List of search result items. Empty if no items found (required).</param>
        /// <param name="totalCount">Total number of items matching the search. Will equal taken if no take was specified in the search parameters. Use this to determine if more items can be fetched with next interval of skip and take (required).</param>
        /// <param name="taken">Number of items returned (required).</param>
        public PaginationResultDTOConsentSearchResultDTO(List<ConsentSearchResultDTO> list = default(List<ConsentSearchResultDTO>), double totalCount = default(double), double taken = default(double))
        {
            // to ensure "list" is required (not null)
            if (list == null) {
                throw new ArgumentNullException("list is a required property for PaginationResultDTOConsentSearchResultDTO and cannot be null");
            }
            this.List = list;
            this.TotalCount = totalCount;
            this.Taken = taken;
        }

        /// <summary>
        /// List of search result items. Empty if no items found
        /// </summary>
        /// <value>List of search result items. Empty if no items found</value>
        [DataMember(Name = "list", IsRequired = true, EmitDefaultValue = false)]
        public List<ConsentSearchResultDTO> List { get; set; }

        /// <summary>
        /// Total number of items matching the search. Will equal taken if no take was specified in the search parameters. Use this to determine if more items can be fetched with next interval of skip and take
        /// </summary>
        /// <value>Total number of items matching the search. Will equal taken if no take was specified in the search parameters. Use this to determine if more items can be fetched with next interval of skip and take</value>
        [DataMember(Name = "totalCount", IsRequired = true, EmitDefaultValue = false)]
        public double TotalCount { get; set; }

        /// <summary>
        /// Number of items returned
        /// </summary>
        /// <value>Number of items returned</value>
        [DataMember(Name = "taken", IsRequired = true, EmitDefaultValue = false)]
        public double Taken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaginationResultDTOConsentSearchResultDTO {\n");
            sb.Append("  List: ").Append(List).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("  Taken: ").Append(Taken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaginationResultDTOConsentSearchResultDTO);
        }

        /// <summary>
        /// Returns true if PaginationResultDTOConsentSearchResultDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of PaginationResultDTOConsentSearchResultDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaginationResultDTOConsentSearchResultDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.List == input.List ||
                    this.List != null &&
                    input.List != null &&
                    this.List.SequenceEqual(input.List)
                ) && 
                (
                    this.TotalCount == input.TotalCount ||
                    this.TotalCount.Equals(input.TotalCount)
                ) && 
                (
                    this.Taken == input.Taken ||
                    this.Taken.Equals(input.Taken)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.List != null)
                    hashCode = hashCode * 59 + this.List.GetHashCode();
                hashCode = hashCode * 59 + this.TotalCount.GetHashCode();
                hashCode = hashCode * 59 + this.Taken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
