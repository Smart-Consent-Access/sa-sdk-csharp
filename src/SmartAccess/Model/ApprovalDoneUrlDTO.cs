/*
 * @ao/ah-api
 *
 * Telia Smart Access API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SmartAccess.Client.OpenAPIDateConverter;

namespace SmartAccess.Model
{
    /// <summary>
    /// Contains the URL including the jwt to use to trigger finalization of the consent approval in the consenting|requesting serviceprovider. The jwt payload is of type SAConsApprovalInitializeSp2ToSaJWT for consenting serviceprovider or SAConsApprovalFinalizeSp1ToSaJWT for requesting serviceprovider
    /// </summary>
    [DataContract(Name = "ApprovalDoneUrlDTO")]
    public partial class ApprovalDoneUrlDTO : IEquatable<ApprovalDoneUrlDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalDoneUrlDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApprovalDoneUrlDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalDoneUrlDTO" /> class.
        /// </summary>
        /// <param name="approvalDoneURL">approvalDoneURL (required).</param>
        public ApprovalDoneUrlDTO(string approvalDoneURL = default(string))
        {
            // to ensure "approvalDoneURL" is required (not null)
            if (approvalDoneURL == null) {
                throw new ArgumentNullException("approvalDoneURL is a required property for ApprovalDoneUrlDTO and cannot be null");
            }
            this.ApprovalDoneURL = approvalDoneURL;
        }

        /// <summary>
        /// Gets or Sets ApprovalDoneURL
        /// </summary>
        [DataMember(Name = "approvalDoneURL", IsRequired = true, EmitDefaultValue = false)]
        public string ApprovalDoneURL { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApprovalDoneUrlDTO {\n");
            sb.Append("  ApprovalDoneURL: ").Append(ApprovalDoneURL).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApprovalDoneUrlDTO);
        }

        /// <summary>
        /// Returns true if ApprovalDoneUrlDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ApprovalDoneUrlDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApprovalDoneUrlDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApprovalDoneURL == input.ApprovalDoneURL ||
                    (this.ApprovalDoneURL != null &&
                    this.ApprovalDoneURL.Equals(input.ApprovalDoneURL))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApprovalDoneURL != null)
                    hashCode = hashCode * 59 + this.ApprovalDoneURL.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
