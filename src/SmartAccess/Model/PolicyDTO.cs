/*
 * @ao/ah-api
 *
 * Telia Smart Access API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SmartAccess.Client.OpenAPIDateConverter;

namespace SmartAccess.Model
{
    /// <summary>
    /// PolicyDTO
    /// </summary>
    [DataContract(Name = "PolicyDTO")]
    public partial class PolicyDTO : IEquatable<PolicyDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PolicyDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyDTO" /> class.
        /// </summary>
        /// <param name="actions">actions (required).</param>
        /// <param name="conditions">conditions (required).</param>
        /// <param name="resources">resources (required).</param>
        public PolicyDTO(List<PolicyActionDTO> actions = default(List<PolicyActionDTO>), List<PolicyConditionDTO> conditions = default(List<PolicyConditionDTO>), List<PolicyResourceDTO> resources = default(List<PolicyResourceDTO>))
        {
            // to ensure "actions" is required (not null)
            if (actions == null) {
                throw new ArgumentNullException("actions is a required property for PolicyDTO and cannot be null");
            }
            this.Actions = actions;
            // to ensure "conditions" is required (not null)
            if (conditions == null) {
                throw new ArgumentNullException("conditions is a required property for PolicyDTO and cannot be null");
            }
            this.Conditions = conditions;
            // to ensure "resources" is required (not null)
            if (resources == null) {
                throw new ArgumentNullException("resources is a required property for PolicyDTO and cannot be null");
            }
            this.Resources = resources;
        }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name = "actions", IsRequired = true, EmitDefaultValue = false)]
        public List<PolicyActionDTO> Actions { get; set; }

        /// <summary>
        /// Gets or Sets Conditions
        /// </summary>
        [DataMember(Name = "conditions", IsRequired = true, EmitDefaultValue = false)]
        public List<PolicyConditionDTO> Conditions { get; set; }

        /// <summary>
        /// Gets or Sets Resources
        /// </summary>
        [DataMember(Name = "resources", IsRequired = true, EmitDefaultValue = false)]
        public List<PolicyResourceDTO> Resources { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PolicyDTO {\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PolicyDTO);
        }

        /// <summary>
        /// Returns true if PolicyDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of PolicyDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolicyDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    input.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                ) && 
                (
                    this.Conditions == input.Conditions ||
                    this.Conditions != null &&
                    input.Conditions != null &&
                    this.Conditions.SequenceEqual(input.Conditions)
                ) && 
                (
                    this.Resources == input.Resources ||
                    this.Resources != null &&
                    input.Resources != null &&
                    this.Resources.SequenceEqual(input.Resources)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Actions != null)
                    hashCode = hashCode * 59 + this.Actions.GetHashCode();
                if (this.Conditions != null)
                    hashCode = hashCode * 59 + this.Conditions.GetHashCode();
                if (this.Resources != null)
                    hashCode = hashCode * 59 + this.Resources.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
