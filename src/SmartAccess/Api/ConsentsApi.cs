/*
 * @ao/ah-api
 *
 * Telia Smart Access API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SmartAccess.Client;
using SmartAccess.Model;

namespace SmartAccess.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConsentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an authorization ticket for the given consent This ticket can be used against the consenting service provider for further integration to prove that the calling service provider is authorized
        /// </remarks>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent id in UUID format</param>
        /// <returns>AuthTicketDTO</returns>
        AuthTicketDTO CreateAuthZTicketForConsent(string consentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an authorization ticket for the given consent This ticket can be used against the consenting service provider for further integration to prove that the calling service provider is authorized
        /// </remarks>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent id in UUID format</param>
        /// <returns>ApiResponse of AuthTicketDTO</returns>
        ApiResponse<AuthTicketDTO> CreateAuthZTicketForConsentWithHttpInfo(string consentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Finalize a consent approval as the requesting service provider. The information about the request to approve is specified in the request body with a signed JWT which will be verified to be signed by the calling/requesting service provider
        /// </remarks>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentApprovalFinalizeBody">The signed jwt with payload of type SAConsApprovalFinalizeSp1ToSaJWT</param>
        /// <returns>ApprovalDoneUrlDTO</returns>
        ApprovalDoneUrlDTO FlowConsentApprovalFinalize(ConsentApprovalFinalizeBody consentApprovalFinalizeBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Finalize a consent approval as the requesting service provider. The information about the request to approve is specified in the request body with a signed JWT which will be verified to be signed by the calling/requesting service provider
        /// </remarks>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentApprovalFinalizeBody">The signed jwt with payload of type SAConsApprovalFinalizeSp1ToSaJWT</param>
        /// <returns>ApiResponse of ApprovalDoneUrlDTO</returns>
        ApiResponse<ApprovalDoneUrlDTO> FlowConsentApprovalFinalizeWithHttpInfo(ConsentApprovalFinalizeBody consentApprovalFinalizeBody);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initialize a consent approval or rejection as the consenting service provider. The information about the request to approve or reject is specified in the request body with a signed JWT which will be verified to be signed by the calling/consenting service provider. A consent request can be approved or rejected by more than one consenting principal (legal entity) by initiating more consents
        /// </remarks>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentApprovalInitializeBody">The signed jwt with payload of type SAConsApprovalInitializeSp2ToSaJWT</param>
        /// <returns>ApprovalDoneUrlDTO</returns>
        ApprovalDoneUrlDTO FlowConsentApprovalInitialize(ConsentApprovalInitializeBody consentApprovalInitializeBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initialize a consent approval or rejection as the consenting service provider. The information about the request to approve or reject is specified in the request body with a signed JWT which will be verified to be signed by the calling/consenting service provider. A consent request can be approved or rejected by more than one consenting principal (legal entity) by initiating more consents
        /// </remarks>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentApprovalInitializeBody">The signed jwt with payload of type SAConsApprovalInitializeSp2ToSaJWT</param>
        /// <returns>ApiResponse of ApprovalDoneUrlDTO</returns>
        ApiResponse<ApprovalDoneUrlDTO> FlowConsentApprovalInitializeWithHttpInfo(ConsentApprovalInitializeBody consentApprovalInitializeBody);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch information about the given consent
        /// </remarks>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent id in UUID format</param>
        /// <returns>ConsentDTO</returns>
        ConsentDTO GetConsent(string consentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch information about the given consent
        /// </remarks>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent id in UUID format</param>
        /// <returns>ApiResponse of ConsentDTO</returns>
        ApiResponse<ConsentDTO> GetConsentWithHttpInfo(string consentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for consents (approvals) given some search parameters. See SearchConsentsDTO for details on parameters. Will return a list of matching consents
        /// </remarks>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchConsentsDTO">The search parameters</param>
        /// <returns>PaginationResultDTOConsentSearchResultDTO</returns>
        PaginationResultDTOConsentSearchResultDTO SearchConsents(SearchConsentsDTO searchConsentsDTO);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for consents (approvals) given some search parameters. See SearchConsentsDTO for details on parameters. Will return a list of matching consents
        /// </remarks>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchConsentsDTO">The search parameters</param>
        /// <returns>ApiResponse of PaginationResultDTOConsentSearchResultDTO</returns>
        ApiResponse<PaginationResultDTOConsentSearchResultDTO> SearchConsentsWithHttpInfo(SearchConsentsDTO searchConsentsDTO);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a single provider consent. This is a complete consent approval for some action, resources and conditions, with your own serviceprovider as both requester and consenter
        /// </remarks>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="singleProviderConsentDTO">Info about the consent to create</param>
        /// <returns>string</returns>
        string SingleProviderConsent(SingleProviderConsentDTO singleProviderConsentDTO);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a single provider consent. This is a complete consent approval for some action, resources and conditions, with your own serviceprovider as both requester and consenter
        /// </remarks>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="singleProviderConsentDTO">Info about the consent to create</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SingleProviderConsentWithHttpInfo(SingleProviderConsentDTO singleProviderConsentDTO);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConsentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an authorization ticket for the given consent This ticket can be used against the consenting service provider for further integration to prove that the calling service provider is authorized
        /// </remarks>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent id in UUID format</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthTicketDTO</returns>
        System.Threading.Tasks.Task<AuthTicketDTO> CreateAuthZTicketForConsentAsync(string consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create an authorization ticket for the given consent This ticket can be used against the consenting service provider for further integration to prove that the calling service provider is authorized
        /// </remarks>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent id in UUID format</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthTicketDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthTicketDTO>> CreateAuthZTicketForConsentWithHttpInfoAsync(string consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Finalize a consent approval as the requesting service provider. The information about the request to approve is specified in the request body with a signed JWT which will be verified to be signed by the calling/requesting service provider
        /// </remarks>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentApprovalFinalizeBody">The signed jwt with payload of type SAConsApprovalFinalizeSp1ToSaJWT</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApprovalDoneUrlDTO</returns>
        System.Threading.Tasks.Task<ApprovalDoneUrlDTO> FlowConsentApprovalFinalizeAsync(ConsentApprovalFinalizeBody consentApprovalFinalizeBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Finalize a consent approval as the requesting service provider. The information about the request to approve is specified in the request body with a signed JWT which will be verified to be signed by the calling/requesting service provider
        /// </remarks>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentApprovalFinalizeBody">The signed jwt with payload of type SAConsApprovalFinalizeSp1ToSaJWT</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApprovalDoneUrlDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApprovalDoneUrlDTO>> FlowConsentApprovalFinalizeWithHttpInfoAsync(ConsentApprovalFinalizeBody consentApprovalFinalizeBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initialize a consent approval or rejection as the consenting service provider. The information about the request to approve or reject is specified in the request body with a signed JWT which will be verified to be signed by the calling/consenting service provider. A consent request can be approved or rejected by more than one consenting principal (legal entity) by initiating more consents
        /// </remarks>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentApprovalInitializeBody">The signed jwt with payload of type SAConsApprovalInitializeSp2ToSaJWT</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApprovalDoneUrlDTO</returns>
        System.Threading.Tasks.Task<ApprovalDoneUrlDTO> FlowConsentApprovalInitializeAsync(ConsentApprovalInitializeBody consentApprovalInitializeBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initialize a consent approval or rejection as the consenting service provider. The information about the request to approve or reject is specified in the request body with a signed JWT which will be verified to be signed by the calling/consenting service provider. A consent request can be approved or rejected by more than one consenting principal (legal entity) by initiating more consents
        /// </remarks>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentApprovalInitializeBody">The signed jwt with payload of type SAConsApprovalInitializeSp2ToSaJWT</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApprovalDoneUrlDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApprovalDoneUrlDTO>> FlowConsentApprovalInitializeWithHttpInfoAsync(ConsentApprovalInitializeBody consentApprovalInitializeBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch information about the given consent
        /// </remarks>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent id in UUID format</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsentDTO</returns>
        System.Threading.Tasks.Task<ConsentDTO> GetConsentAsync(string consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch information about the given consent
        /// </remarks>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent id in UUID format</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsentDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConsentDTO>> GetConsentWithHttpInfoAsync(string consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for consents (approvals) given some search parameters. See SearchConsentsDTO for details on parameters. Will return a list of matching consents
        /// </remarks>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchConsentsDTO">The search parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginationResultDTOConsentSearchResultDTO</returns>
        System.Threading.Tasks.Task<PaginationResultDTOConsentSearchResultDTO> SearchConsentsAsync(SearchConsentsDTO searchConsentsDTO, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for consents (approvals) given some search parameters. See SearchConsentsDTO for details on parameters. Will return a list of matching consents
        /// </remarks>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchConsentsDTO">The search parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginationResultDTOConsentSearchResultDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginationResultDTOConsentSearchResultDTO>> SearchConsentsWithHttpInfoAsync(SearchConsentsDTO searchConsentsDTO, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a single provider consent. This is a complete consent approval for some action, resources and conditions, with your own serviceprovider as both requester and consenter
        /// </remarks>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="singleProviderConsentDTO">Info about the consent to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SingleProviderConsentAsync(SingleProviderConsentDTO singleProviderConsentDTO, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a single provider consent. This is a complete consent approval for some action, resources and conditions, with your own serviceprovider as both requester and consenter
        /// </remarks>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="singleProviderConsentDTO">Info about the consent to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SingleProviderConsentWithHttpInfoAsync(SingleProviderConsentDTO singleProviderConsentDTO, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConsentsApi : IConsentsApiSync, IConsentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConsentsApi : IConsentsApi
    {
        private SmartAccess.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConsentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConsentsApi(string basePath)
        {
            this.Configuration = SmartAccess.Client.Configuration.MergeConfigurations(
                SmartAccess.Client.GlobalConfiguration.Instance,
                new SmartAccess.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SmartAccess.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SmartAccess.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SmartAccess.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConsentsApi(SmartAccess.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SmartAccess.Client.Configuration.MergeConfigurations(
                SmartAccess.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SmartAccess.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SmartAccess.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SmartAccess.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ConsentsApi(SmartAccess.Client.ISynchronousClient client, SmartAccess.Client.IAsynchronousClient asyncClient, SmartAccess.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SmartAccess.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SmartAccess.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SmartAccess.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SmartAccess.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SmartAccess.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Create an authorization ticket for the given consent This ticket can be used against the consenting service provider for further integration to prove that the calling service provider is authorized
        /// </summary>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent id in UUID format</param>
        /// <returns>AuthTicketDTO</returns>
        public AuthTicketDTO CreateAuthZTicketForConsent(string consentId)
        {
            SmartAccess.Client.ApiResponse<AuthTicketDTO> localVarResponse = CreateAuthZTicketForConsentWithHttpInfo(consentId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create an authorization ticket for the given consent This ticket can be used against the consenting service provider for further integration to prove that the calling service provider is authorized
        /// </summary>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent id in UUID format</param>
        /// <returns>ApiResponse of AuthTicketDTO</returns>
        public SmartAccess.Client.ApiResponse<AuthTicketDTO> CreateAuthZTicketForConsentWithHttpInfo(string consentId)
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
                throw new SmartAccess.Client.ApiException(400, "Missing required parameter 'consentId' when calling ConsentsApi->CreateAuthZTicketForConsent");

            SmartAccess.Client.RequestOptions localVarRequestOptions = new SmartAccess.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SmartAccess.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SmartAccess.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("consentId", SmartAccess.Client.ClientUtils.ParameterToString(consentId)); // path parameter

            // authentication (jwt) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AuthTicketDTO>("/consents/{consentId}/ticket", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthZTicketForConsent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create an authorization ticket for the given consent This ticket can be used against the consenting service provider for further integration to prove that the calling service provider is authorized
        /// </summary>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent id in UUID format</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthTicketDTO</returns>
        public async System.Threading.Tasks.Task<AuthTicketDTO> CreateAuthZTicketForConsentAsync(string consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SmartAccess.Client.ApiResponse<AuthTicketDTO> localVarResponse = await CreateAuthZTicketForConsentWithHttpInfoAsync(consentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create an authorization ticket for the given consent This ticket can be used against the consenting service provider for further integration to prove that the calling service provider is authorized
        /// </summary>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent id in UUID format</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthTicketDTO)</returns>
        public async System.Threading.Tasks.Task<SmartAccess.Client.ApiResponse<AuthTicketDTO>> CreateAuthZTicketForConsentWithHttpInfoAsync(string consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
                throw new SmartAccess.Client.ApiException(400, "Missing required parameter 'consentId' when calling ConsentsApi->CreateAuthZTicketForConsent");


            SmartAccess.Client.RequestOptions localVarRequestOptions = new SmartAccess.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SmartAccess.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SmartAccess.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("consentId", SmartAccess.Client.ClientUtils.ParameterToString(consentId)); // path parameter

            // authentication (jwt) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AuthTicketDTO>("/consents/{consentId}/ticket", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthZTicketForConsent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Finalize a consent approval as the requesting service provider. The information about the request to approve is specified in the request body with a signed JWT which will be verified to be signed by the calling/requesting service provider
        /// </summary>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentApprovalFinalizeBody">The signed jwt with payload of type SAConsApprovalFinalizeSp1ToSaJWT</param>
        /// <returns>ApprovalDoneUrlDTO</returns>
        public ApprovalDoneUrlDTO FlowConsentApprovalFinalize(ConsentApprovalFinalizeBody consentApprovalFinalizeBody)
        {
            SmartAccess.Client.ApiResponse<ApprovalDoneUrlDTO> localVarResponse = FlowConsentApprovalFinalizeWithHttpInfo(consentApprovalFinalizeBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Finalize a consent approval as the requesting service provider. The information about the request to approve is specified in the request body with a signed JWT which will be verified to be signed by the calling/requesting service provider
        /// </summary>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentApprovalFinalizeBody">The signed jwt with payload of type SAConsApprovalFinalizeSp1ToSaJWT</param>
        /// <returns>ApiResponse of ApprovalDoneUrlDTO</returns>
        public SmartAccess.Client.ApiResponse<ApprovalDoneUrlDTO> FlowConsentApprovalFinalizeWithHttpInfo(ConsentApprovalFinalizeBody consentApprovalFinalizeBody)
        {
            // verify the required parameter 'consentApprovalFinalizeBody' is set
            if (consentApprovalFinalizeBody == null)
                throw new SmartAccess.Client.ApiException(400, "Missing required parameter 'consentApprovalFinalizeBody' when calling ConsentsApi->FlowConsentApprovalFinalize");

            SmartAccess.Client.RequestOptions localVarRequestOptions = new SmartAccess.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SmartAccess.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SmartAccess.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = consentApprovalFinalizeBody;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ApprovalDoneUrlDTO>("/consents/flow_consent_approval_finalize", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FlowConsentApprovalFinalize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Finalize a consent approval as the requesting service provider. The information about the request to approve is specified in the request body with a signed JWT which will be verified to be signed by the calling/requesting service provider
        /// </summary>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentApprovalFinalizeBody">The signed jwt with payload of type SAConsApprovalFinalizeSp1ToSaJWT</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApprovalDoneUrlDTO</returns>
        public async System.Threading.Tasks.Task<ApprovalDoneUrlDTO> FlowConsentApprovalFinalizeAsync(ConsentApprovalFinalizeBody consentApprovalFinalizeBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SmartAccess.Client.ApiResponse<ApprovalDoneUrlDTO> localVarResponse = await FlowConsentApprovalFinalizeWithHttpInfoAsync(consentApprovalFinalizeBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Finalize a consent approval as the requesting service provider. The information about the request to approve is specified in the request body with a signed JWT which will be verified to be signed by the calling/requesting service provider
        /// </summary>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentApprovalFinalizeBody">The signed jwt with payload of type SAConsApprovalFinalizeSp1ToSaJWT</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApprovalDoneUrlDTO)</returns>
        public async System.Threading.Tasks.Task<SmartAccess.Client.ApiResponse<ApprovalDoneUrlDTO>> FlowConsentApprovalFinalizeWithHttpInfoAsync(ConsentApprovalFinalizeBody consentApprovalFinalizeBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentApprovalFinalizeBody' is set
            if (consentApprovalFinalizeBody == null)
                throw new SmartAccess.Client.ApiException(400, "Missing required parameter 'consentApprovalFinalizeBody' when calling ConsentsApi->FlowConsentApprovalFinalize");


            SmartAccess.Client.RequestOptions localVarRequestOptions = new SmartAccess.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SmartAccess.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SmartAccess.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = consentApprovalFinalizeBody;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApprovalDoneUrlDTO>("/consents/flow_consent_approval_finalize", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FlowConsentApprovalFinalize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Initialize a consent approval or rejection as the consenting service provider. The information about the request to approve or reject is specified in the request body with a signed JWT which will be verified to be signed by the calling/consenting service provider. A consent request can be approved or rejected by more than one consenting principal (legal entity) by initiating more consents
        /// </summary>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentApprovalInitializeBody">The signed jwt with payload of type SAConsApprovalInitializeSp2ToSaJWT</param>
        /// <returns>ApprovalDoneUrlDTO</returns>
        public ApprovalDoneUrlDTO FlowConsentApprovalInitialize(ConsentApprovalInitializeBody consentApprovalInitializeBody)
        {
            SmartAccess.Client.ApiResponse<ApprovalDoneUrlDTO> localVarResponse = FlowConsentApprovalInitializeWithHttpInfo(consentApprovalInitializeBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Initialize a consent approval or rejection as the consenting service provider. The information about the request to approve or reject is specified in the request body with a signed JWT which will be verified to be signed by the calling/consenting service provider. A consent request can be approved or rejected by more than one consenting principal (legal entity) by initiating more consents
        /// </summary>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentApprovalInitializeBody">The signed jwt with payload of type SAConsApprovalInitializeSp2ToSaJWT</param>
        /// <returns>ApiResponse of ApprovalDoneUrlDTO</returns>
        public SmartAccess.Client.ApiResponse<ApprovalDoneUrlDTO> FlowConsentApprovalInitializeWithHttpInfo(ConsentApprovalInitializeBody consentApprovalInitializeBody)
        {
            // verify the required parameter 'consentApprovalInitializeBody' is set
            if (consentApprovalInitializeBody == null)
                throw new SmartAccess.Client.ApiException(400, "Missing required parameter 'consentApprovalInitializeBody' when calling ConsentsApi->FlowConsentApprovalInitialize");

            SmartAccess.Client.RequestOptions localVarRequestOptions = new SmartAccess.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SmartAccess.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SmartAccess.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = consentApprovalInitializeBody;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ApprovalDoneUrlDTO>("/consents/flow_consent_approval_initialize", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FlowConsentApprovalInitialize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Initialize a consent approval or rejection as the consenting service provider. The information about the request to approve or reject is specified in the request body with a signed JWT which will be verified to be signed by the calling/consenting service provider. A consent request can be approved or rejected by more than one consenting principal (legal entity) by initiating more consents
        /// </summary>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentApprovalInitializeBody">The signed jwt with payload of type SAConsApprovalInitializeSp2ToSaJWT</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApprovalDoneUrlDTO</returns>
        public async System.Threading.Tasks.Task<ApprovalDoneUrlDTO> FlowConsentApprovalInitializeAsync(ConsentApprovalInitializeBody consentApprovalInitializeBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SmartAccess.Client.ApiResponse<ApprovalDoneUrlDTO> localVarResponse = await FlowConsentApprovalInitializeWithHttpInfoAsync(consentApprovalInitializeBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Initialize a consent approval or rejection as the consenting service provider. The information about the request to approve or reject is specified in the request body with a signed JWT which will be verified to be signed by the calling/consenting service provider. A consent request can be approved or rejected by more than one consenting principal (legal entity) by initiating more consents
        /// </summary>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentApprovalInitializeBody">The signed jwt with payload of type SAConsApprovalInitializeSp2ToSaJWT</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApprovalDoneUrlDTO)</returns>
        public async System.Threading.Tasks.Task<SmartAccess.Client.ApiResponse<ApprovalDoneUrlDTO>> FlowConsentApprovalInitializeWithHttpInfoAsync(ConsentApprovalInitializeBody consentApprovalInitializeBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentApprovalInitializeBody' is set
            if (consentApprovalInitializeBody == null)
                throw new SmartAccess.Client.ApiException(400, "Missing required parameter 'consentApprovalInitializeBody' when calling ConsentsApi->FlowConsentApprovalInitialize");


            SmartAccess.Client.RequestOptions localVarRequestOptions = new SmartAccess.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SmartAccess.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SmartAccess.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = consentApprovalInitializeBody;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApprovalDoneUrlDTO>("/consents/flow_consent_approval_initialize", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FlowConsentApprovalInitialize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch information about the given consent
        /// </summary>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent id in UUID format</param>
        /// <returns>ConsentDTO</returns>
        public ConsentDTO GetConsent(string consentId)
        {
            SmartAccess.Client.ApiResponse<ConsentDTO> localVarResponse = GetConsentWithHttpInfo(consentId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch information about the given consent
        /// </summary>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent id in UUID format</param>
        /// <returns>ApiResponse of ConsentDTO</returns>
        public SmartAccess.Client.ApiResponse<ConsentDTO> GetConsentWithHttpInfo(string consentId)
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
                throw new SmartAccess.Client.ApiException(400, "Missing required parameter 'consentId' when calling ConsentsApi->GetConsent");

            SmartAccess.Client.RequestOptions localVarRequestOptions = new SmartAccess.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SmartAccess.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SmartAccess.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("consentId", SmartAccess.Client.ClientUtils.ParameterToString(consentId)); // path parameter

            // authentication (jwt) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConsentDTO>("/consents/{consentId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConsent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch information about the given consent
        /// </summary>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent id in UUID format</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsentDTO</returns>
        public async System.Threading.Tasks.Task<ConsentDTO> GetConsentAsync(string consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SmartAccess.Client.ApiResponse<ConsentDTO> localVarResponse = await GetConsentWithHttpInfoAsync(consentId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch information about the given consent
        /// </summary>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent id in UUID format</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsentDTO)</returns>
        public async System.Threading.Tasks.Task<SmartAccess.Client.ApiResponse<ConsentDTO>> GetConsentWithHttpInfoAsync(string consentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
                throw new SmartAccess.Client.ApiException(400, "Missing required parameter 'consentId' when calling ConsentsApi->GetConsent");


            SmartAccess.Client.RequestOptions localVarRequestOptions = new SmartAccess.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SmartAccess.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SmartAccess.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("consentId", SmartAccess.Client.ClientUtils.ParameterToString(consentId)); // path parameter

            // authentication (jwt) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ConsentDTO>("/consents/{consentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConsent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Search for consents (approvals) given some search parameters. See SearchConsentsDTO for details on parameters. Will return a list of matching consents
        /// </summary>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchConsentsDTO">The search parameters</param>
        /// <returns>PaginationResultDTOConsentSearchResultDTO</returns>
        public PaginationResultDTOConsentSearchResultDTO SearchConsents(SearchConsentsDTO searchConsentsDTO)
        {
            SmartAccess.Client.ApiResponse<PaginationResultDTOConsentSearchResultDTO> localVarResponse = SearchConsentsWithHttpInfo(searchConsentsDTO);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Search for consents (approvals) given some search parameters. See SearchConsentsDTO for details on parameters. Will return a list of matching consents
        /// </summary>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchConsentsDTO">The search parameters</param>
        /// <returns>ApiResponse of PaginationResultDTOConsentSearchResultDTO</returns>
        public SmartAccess.Client.ApiResponse<PaginationResultDTOConsentSearchResultDTO> SearchConsentsWithHttpInfo(SearchConsentsDTO searchConsentsDTO)
        {
            // verify the required parameter 'searchConsentsDTO' is set
            if (searchConsentsDTO == null)
                throw new SmartAccess.Client.ApiException(400, "Missing required parameter 'searchConsentsDTO' when calling ConsentsApi->SearchConsents");

            SmartAccess.Client.RequestOptions localVarRequestOptions = new SmartAccess.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SmartAccess.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SmartAccess.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = searchConsentsDTO;

            // authentication (jwt) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaginationResultDTOConsentSearchResultDTO>("/consents/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchConsents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Search for consents (approvals) given some search parameters. See SearchConsentsDTO for details on parameters. Will return a list of matching consents
        /// </summary>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchConsentsDTO">The search parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginationResultDTOConsentSearchResultDTO</returns>
        public async System.Threading.Tasks.Task<PaginationResultDTOConsentSearchResultDTO> SearchConsentsAsync(SearchConsentsDTO searchConsentsDTO, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SmartAccess.Client.ApiResponse<PaginationResultDTOConsentSearchResultDTO> localVarResponse = await SearchConsentsWithHttpInfoAsync(searchConsentsDTO, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Search for consents (approvals) given some search parameters. See SearchConsentsDTO for details on parameters. Will return a list of matching consents
        /// </summary>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchConsentsDTO">The search parameters</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginationResultDTOConsentSearchResultDTO)</returns>
        public async System.Threading.Tasks.Task<SmartAccess.Client.ApiResponse<PaginationResultDTOConsentSearchResultDTO>> SearchConsentsWithHttpInfoAsync(SearchConsentsDTO searchConsentsDTO, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'searchConsentsDTO' is set
            if (searchConsentsDTO == null)
                throw new SmartAccess.Client.ApiException(400, "Missing required parameter 'searchConsentsDTO' when calling ConsentsApi->SearchConsents");


            SmartAccess.Client.RequestOptions localVarRequestOptions = new SmartAccess.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SmartAccess.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SmartAccess.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = searchConsentsDTO;

            // authentication (jwt) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PaginationResultDTOConsentSearchResultDTO>("/consents/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchConsents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a single provider consent. This is a complete consent approval for some action, resources and conditions, with your own serviceprovider as both requester and consenter
        /// </summary>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="singleProviderConsentDTO">Info about the consent to create</param>
        /// <returns>string</returns>
        public string SingleProviderConsent(SingleProviderConsentDTO singleProviderConsentDTO)
        {
            SmartAccess.Client.ApiResponse<string> localVarResponse = SingleProviderConsentWithHttpInfo(singleProviderConsentDTO);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a single provider consent. This is a complete consent approval for some action, resources and conditions, with your own serviceprovider as both requester and consenter
        /// </summary>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="singleProviderConsentDTO">Info about the consent to create</param>
        /// <returns>ApiResponse of string</returns>
        public SmartAccess.Client.ApiResponse<string> SingleProviderConsentWithHttpInfo(SingleProviderConsentDTO singleProviderConsentDTO)
        {
            // verify the required parameter 'singleProviderConsentDTO' is set
            if (singleProviderConsentDTO == null)
                throw new SmartAccess.Client.ApiException(400, "Missing required parameter 'singleProviderConsentDTO' when calling ConsentsApi->SingleProviderConsent");

            SmartAccess.Client.RequestOptions localVarRequestOptions = new SmartAccess.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SmartAccess.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SmartAccess.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = singleProviderConsentDTO;

            // authentication (jwt) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/consents/single_provider_consent", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SingleProviderConsent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a single provider consent. This is a complete consent approval for some action, resources and conditions, with your own serviceprovider as both requester and consenter
        /// </summary>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="singleProviderConsentDTO">Info about the consent to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SingleProviderConsentAsync(SingleProviderConsentDTO singleProviderConsentDTO, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SmartAccess.Client.ApiResponse<string> localVarResponse = await SingleProviderConsentWithHttpInfoAsync(singleProviderConsentDTO, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a single provider consent. This is a complete consent approval for some action, resources and conditions, with your own serviceprovider as both requester and consenter
        /// </summary>
        /// <exception cref="SmartAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="singleProviderConsentDTO">Info about the consent to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<SmartAccess.Client.ApiResponse<string>> SingleProviderConsentWithHttpInfoAsync(SingleProviderConsentDTO singleProviderConsentDTO, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'singleProviderConsentDTO' is set
            if (singleProviderConsentDTO == null)
                throw new SmartAccess.Client.ApiException(400, "Missing required parameter 'singleProviderConsentDTO' when calling ConsentsApi->SingleProviderConsent");


            SmartAccess.Client.RequestOptions localVarRequestOptions = new SmartAccess.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SmartAccess.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SmartAccess.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = singleProviderConsentDTO;

            // authentication (jwt) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/consents/single_provider_consent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SingleProviderConsent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
