/*
 * @ao/ah-api
 *
 * Telia Smart Access API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SmartAccess.Client;
using SmartAccess.Api;
// uncomment below to import models
//using SmartAccess.Model;

namespace SmartAccess.Test.Api
{
    /// <summary>
    ///  Class for testing ConsentRequestsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ConsentRequestsApiTests : IDisposable
    {
        private ConsentRequestsApi instance;

        public ConsentRequestsApiTests()
        {
            instance = new ConsentRequestsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ConsentRequestsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ConsentRequestsApi
            //Assert.IsType<ConsentRequestsApi>(instance);
        }

        /// <summary>
        /// Test DeleteId
        /// </summary>
        [Fact]
        public void DeleteIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string consentRequestId = null;
            //instance.DeleteId(consentRequestId);
        }

        /// <summary>
        /// Test FlowConsentRequestFinalize
        /// </summary>
        [Fact]
        public void FlowConsentRequestFinalizeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ConsentRequestFinalizeBody consentRequestFinalizeBody = null;
            //var response = instance.FlowConsentRequestFinalize(consentRequestFinalizeBody);
            //Assert.IsType<ConsentRequestFinalizeUrlDTO>(response);
        }

        /// <summary>
        /// Test FlowConsentRequestInitialize
        /// </summary>
        [Fact]
        public void FlowConsentRequestInitializeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ConsentRequestTokenBody consentRequestTokenBody = null;
            //var response = instance.FlowConsentRequestInitialize(consentRequestTokenBody);
            //Assert.IsType<ConsentRequestUrlDTO>(response);
        }

        /// <summary>
        /// Test GetConsentRequest
        /// </summary>
        [Fact]
        public void GetConsentRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string consentRequestId = null;
            //var response = instance.GetConsentRequest(consentRequestId);
            //Assert.IsType<ConsentRequestSummaryDTO>(response);
        }

        /// <summary>
        /// Test GetConsentRequests
        /// </summary>
        [Fact]
        public void GetConsentRequestsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string direction = null;
            //var response = instance.GetConsentRequests(direction);
            //Assert.IsType<List<ConsentRequestSummaryDTO>>(response);
        }

        /// <summary>
        /// Test SearchConsentRequests
        /// </summary>
        [Fact]
        public void SearchConsentRequestsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SearchConsentRequestsDTO searchConsentRequestsDTO = null;
            //var response = instance.SearchConsentRequests(searchConsentRequestsDTO);
            //Assert.IsType<PaginationResultDTOConsentRequestSearchResultDTO>(response);
        }
    }
}
