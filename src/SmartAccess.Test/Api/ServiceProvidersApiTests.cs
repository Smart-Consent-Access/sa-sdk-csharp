/*
 * @ao/ah-api
 *
 * Telia Smart Access API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SmartAccess.Client;
using SmartAccess.Api;
// uncomment below to import models
//using SmartAccess.Model;

namespace SmartAccess.Test.Api
{
    /// <summary>
    ///  Class for testing ServiceProvidersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ServiceProvidersApiTests : IDisposable
    {
        private ServiceProvidersApi instance;

        public ServiceProvidersApiTests()
        {
            instance = new ServiceProvidersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ServiceProvidersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ServiceProvidersApi
            //Assert.IsType<ServiceProvidersApi>(instance);
        }

        /// <summary>
        /// Test DeleteServiceProvider
        /// </summary>
        [Fact]
        public void DeleteServiceProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serviceProviderId = null;
            //instance.DeleteServiceProvider(serviceProviderId);
        }

        /// <summary>
        /// Test GetServiceProvider
        /// </summary>
        [Fact]
        public void GetServiceProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetServiceProvider(id);
            //Assert.IsType<ServiceProviderDTO>(response);
        }

        /// <summary>
        /// Test PatchServiceProviders
        /// </summary>
        [Fact]
        public void PatchServiceProvidersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serviceProviderId = null;
            //ServiceProviderPatchDTO serviceProviderPatchDTO = null;
            //var response = instance.PatchServiceProviders(serviceProviderId, serviceProviderPatchDTO);
            //Assert.IsType<ServiceProviderDTO>(response);
        }

        /// <summary>
        /// Test PostServiceProviders
        /// </summary>
        [Fact]
        public void PostServiceProvidersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ServiceProviderDTO serviceProviderDTO = null;
            //var response = instance.PostServiceProviders(serviceProviderDTO);
            //Assert.IsType<ServiceProviderDTO>(response);
        }
    }
}
