/*
 * @ao/ah-api
 *
 * Telia Smart Access API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SmartAccess.Client;
using SmartAccess.Api;
// uncomment below to import models
//using SmartAccess.Model;

namespace SmartAccess.Test.Api
{
    /// <summary>
    ///  Class for testing ActionTemplatesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ActionTemplatesApiTests : IDisposable
    {
        private ActionTemplatesApi instance;

        public ActionTemplatesApiTests()
        {
            instance = new ActionTemplatesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ActionTemplatesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ActionTemplatesApi
            //Assert.IsType<ActionTemplatesApi>(instance);
        }

        /// <summary>
        /// Test DeleteActionTemplate
        /// </summary>
        [Fact]
        public void DeleteActionTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string actionTemplateId = null;
            //instance.DeleteActionTemplate(actionTemplateId);
        }

        /// <summary>
        /// Test GetAllActionTemplatesForSP
        /// </summary>
        [Fact]
        public void GetAllActionTemplatesForSPTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serviceProviderId = null;
            //var response = instance.GetAllActionTemplatesForSP(serviceProviderId);
            //Assert.IsType<List<ActionTemplateDTO>>(response);
        }

        /// <summary>
        /// Test GetOneActionTemplateById
        /// </summary>
        [Fact]
        public void GetOneActionTemplateByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string actionTemplateId = null;
            //var response = instance.GetOneActionTemplateById(actionTemplateId);
            //Assert.IsType<ActionTemplateDTO>(response);
        }

        /// <summary>
        /// Test PostActionTemplate
        /// </summary>
        [Fact]
        public void PostActionTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateActionTemplateDTO createActionTemplateDTO = null;
            //var response = instance.PostActionTemplate(createActionTemplateDTO);
            //Assert.IsType<ActionTemplateDTO>(response);
        }

        /// <summary>
        /// Test UpdateActionTemplate
        /// </summary>
        [Fact]
        public void UpdateActionTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string actionTemplateId = null;
            //CreateActionTemplateDTO createActionTemplateDTO = null;
            //var response = instance.UpdateActionTemplate(actionTemplateId, createActionTemplateDTO);
            //Assert.IsType<ActionTemplateDTO>(response);
        }
    }
}
